Base Procedure Notes
-------------------------------------------------------------------------------------------------

skill1 = team1 skill
skill2 = team2 skill
gMod   = ground mod
allowDelays variable?
	
Optional: 
style1 = team1 style
style2 = team2 style

set base run score probabilities
	i.e. the chance of getting a 4, 6, etc off a hit
	
resourcePoint function which accepts either a stop[][] or start[][] array
	returns resourcepoints from table for [ballsleft,wktslost]
	
initialise stoppage array[]
	2d array to store stop[ballsleft,wktslost] for stoppages first initiated with [n*6,10] and the other two with [0,0]
	2d array to store strt[ballsleft,wktslost] for restarts all initiated with [0,0]
	
//don't think how the batsmen got out or how much they scored should matter too much

initialise batsmen strength arrays
	b1str, b2str   -- arrays of batsmen strengths; start higher, gradually get lower
	*** adjust these arrays based on style mods. will need to test numbers and make sure team style can't overpower ground mod
	
calculate toHit value based on skill ratio
	adjust toHit for ground mod            -- batting track vs bowling track
	
tackle scenario one if interruption is before start
	n set to <=50 for both teams

//MATCH ENGINE
run through ball by ball, accepts n as argument, and non-zero target T if second innings
target = T
if T != 0
	determineApproach(target)
else
	determineApproach()
for i < n*6; i++
	if play is not stopped
		batsman strength + some implementation of rand() vs toHit
			if hit, calculate runs off this ball
				add to team total
				if not 4 or 6, % of out
			if not hit, % of out
			if legal delivery
                    		check if out
					wkt++
					if wkt!=10
                        			move to next batsman strength value
					else break
                        	i++
                	if illegal delivery
                    		add 1 to team total
                    		continue loop
			if team total > target when T!=0
				break
		each ball has % of stoppage; if stopped (only if number of stoppages < 3)
			set stoppage flag
			set stop[ballsleft,wktslost] at a,a
	else if play is stopped
            i++ //number of balls cannot be greater than 300
            each ball has % of stoppage; if below threshold for stoppage
	    	set strt[ballsleft,wktslost] at a,a
		if T != 0
			r2 = resourcePoint(stop[x,x]) - resourcePoint(start[x,x])
			revise target T = S x r2/r1 + 1
			determine approach again 
		a++
                set stoppage flag to false
                continue loop	

//DLS CALCULATION
res = 0
for x = 0 < 3; x++
	res = res +  = resourcePoint(stop[x,x]) - resourcePoint(start[x,x])
		
calculate run rate for first innings
calculate targets for second innings based on rates, wickets lost, and number of overs

determine second innings approach (aggressive, patient, defensive, etc)
this will apply a modifier to batsman strength/run probabilities (?)

//ACTUAL MATCH PROCEEDINGS
set base run score probs
//first innings
n1 = tackle scenario one
init stoppage array
init BatStrength arrays
calc toHit
run match engine for n overs
S = team 1 score, W1 = wicketsfallen, b = balls faced
r1 = returned value of DLS calculation function
//second innings
n2 = tackle scenario one
init stoppage array
init BatStrength arrays
calc toHit
if n1>n2
	get r2 = returned value of DLS calculation function
	revise target T = S x r2/r1 + 1
	determine approach again
else if n1<n2
	get r2 = returned value of DLS calculation function
	revise target T = S + 245 x (r2 â€“ r1)/100 + 1
	determine approach
run match engine for n overs
C = team 2 score, W2 = wicketsfallen, b = balls faced
r2 = returned value of DLS calculation function
if r2 is not 100
	team 2 par score = S x R2/R1 + 1
print results
